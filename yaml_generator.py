"""
YAML Generator for ESPHome LVGL configuration
"""

import yaml
from typing import Dict, List, Any
from widgets import LVGLWidget

class YAMLGenerator:
    """Generate ESPHome YAML configuration from LVGL project"""
    
    def __init__(self):
        self.indentation = 2
        
    def generate_yaml(self, display_config: Dict, pages_data: Dict, widgets_data: Dict[str, List[Dict]]) -> str:
        """Generate complete ESPHome YAML configuration"""
        
        # Start with basic structure
        config = {
            'esphome': {
                'name': 'lvgl-display',
                'platform': 'ESP32'
            },
            'wifi': {
                'ssid': '!secret wifi_ssid',
                'password': '!secret wifi_password'
            },
            'logger': None,
            'api': {
                'encryption': {
                    'key': '!secret api_encryption_key'
                }
            },
            'ota': {
                'password': '!secret ota_password'
            }
        }
        
        # Add display configuration
        config['display'] = self.generate_display_config(display_config)
        
        # Add LVGL configuration
        config['lvgl'] = self.generate_lvgl_config(display_config, pages_data, widgets_data)
        
        # Convert to YAML
        yaml_str = yaml.dump(config, default_flow_style=False, indent=self.indentation, sort_keys=False)
        
        # Add header comment
        header = """# ESPHome LVGL Configuration
# Generated by LVGL Layout Editor
# 
# This configuration contains:
# - Display driver setup
# - LVGL component configuration  
# - Widget layouts and styling
# - Page definitions and navigation
#
# Customize the hardware-specific sections (SPI pins, display driver, etc.)
# according to your actual hardware setup.

"""
        
        return header + yaml_str
        
    def generate_display_config(self, display_config: Dict) -> List[Dict]:
        """Generate display driver configuration"""
        
        # This is a template - users need to customize for their hardware
        display_cfg = {
            'platform': 'ili9xxx',  # Example display driver
            'model': 'ili9341',     # Example model
            'cs_pin': 'GPIO5',      # Customize these pins
            'dc_pin': 'GPIO2',
            'reset_pin': 'GPIO4',
            'rotation': 0,
            'dimensions': {
                'width': display_config['width'],
                'height': display_config['height']
            },
            'auto_clear_enabled': False,
            'update_interval': 'never'
        }
        
        return [display_cfg]
        
    def generate_lvgl_config(self, display_config: Dict, pages_data: Dict, widgets_data: Dict[str, List[Dict]]) -> Dict:
        """Generate LVGL component configuration"""
        
        lvgl_config = {
            'color_depth': display_config.get('color_depth', 16),
            'buffer_size': display_config.get('buffer_size', '100%'),
            'log_level': 'WARN',
            'byte_order': 'big_endian'
        }
        
        # Add pages if multiple pages exist
        if len(pages_data) > 1:
            lvgl_config['pages'] = self.generate_pages_config(pages_data, widgets_data)
        else:
            # Single page - put widgets directly in main config
            page_id = list(pages_data.keys())[0] if pages_data else 'main_page'
            if page_id in widgets_data:
                lvgl_config['widgets'] = self.generate_widgets_config(widgets_data[page_id])
                
        return lvgl_config
        
    def generate_pages_config(self, pages_data: Dict, widgets_data: Dict[str, List[Dict]]) -> List[Dict]:
        """Generate pages configuration"""
        pages = []
        
        for page_id, page_info in pages_data.items():
            page_config = {
                'id': page_id
            }
            
            # Add page properties
            if 'layout' in page_info and page_info['layout'] != 'NONE':
                page_config['layout'] = {'type': page_info['layout']}
                
            # Add widgets for this page
            if page_id in widgets_data and widgets_data[page_id]:
                page_config['widgets'] = self.generate_widgets_config(widgets_data[page_id])
                
            pages.append(page_config)
            
        return pages
        
    def generate_widgets_config(self, widgets_list: List[Dict]) -> List[Dict]:
        """Generate widgets configuration"""
        widgets = []
        
        for widget_data in widgets_list:
            widget_config = self.convert_widget_to_yaml(widget_data)
            if widget_config:
                widgets.append(widget_config)
                
        return widgets
        
    def convert_widget_to_yaml(self, widget_data: Dict) -> Dict:
        """Convert widget data to YAML format"""
        if 'widget_type' not in widget_data:
            return {}
            
        widget_type = widget_data['widget_type']
        config = {}
        
        # Copy basic properties
        for key, value in widget_data.items():
            if key == 'widget_type':
                continue
            elif key == 'children' and value:
                # Handle child widgets
                config['widgets'] = self.generate_widgets_config(value)
            elif key == 'actions' and value:
                # Handle actions/triggers
                config.update(value)
            elif value is not None and value != '' and value != []:
                # Include non-empty values
                if isinstance(value, str) and value.startswith('0x'):
                    # Keep color values as-is
                    config[key] = value
                elif key in ['width', 'height'] and value == 'SIZE_CONTENT':
                    # Skip SIZE_CONTENT as it's the default
                    continue
                elif key in ['x', 'y'] and value == 0:
                    # Skip zero positions as they're default
                    continue
                elif isinstance(value, bool) and not value:
                    # Skip false boolean values as they're typically default
                    continue
                else:
                    config[key] = value
                    
        return {widget_type: config} if config else {widget_type: None}
        
    def generate_automation_yaml(self, widgets_data: Dict[str, List[Dict]]) -> str:
        """Generate automation YAML for widget interactions"""
        automations = []
        
        # Collect all widgets with actions
        all_widgets = []
        for page_widgets in widgets_data.values():
            all_widgets.extend(page_widgets)
            
        # Generate automations for each widget with actions
        for widget_data in all_widgets:
            if 'actions' in widget_data and widget_data['actions']:
                widget_id = widget_data.get('id', f"unknown_{widget_data.get('widget_type', 'widget')}")
                
                for trigger, action_config in widget_data['actions'].items():
                    automation = {
                        'alias': f"{widget_id}_{trigger}",
                        'trigger': {
                            'platform': 'lvgl',
                            'widget_id': widget_id,
                            'event': trigger
                        }
                    }
                    
                    if 'then' in action_config:
                        automation['action'] = action_config['then']
                    else:
                        automation['action'] = [{'logger.log': f'{trigger} triggered on {widget_id}'}]
                        
                    automations.append(automation)
                    
        if automations:
            yaml_str = yaml.dump({'automation': automations}, default_flow_style=False, indent=self.indentation)
            return f"\n# Widget Automations\n{yaml_str}"
        
        return ""
        
    def generate_style_definitions(self, widgets_data: Dict[str, List[Dict]]) -> Dict:
        """Generate common style definitions to reduce repetition"""
        styles = {}
        
        # Analyze widgets to find common style patterns
        style_patterns = {}
        
        def analyze_widget(widget_data):
            # Extract style properties
            style_props = {}
            for key, value in widget_data.items():
                if key.startswith(('bg_', 'border_', 'text_', 'pad_', 'radius')):
                    style_props[key] = value
                    
            # Create a signature for this style combination
            if style_props:
                signature = str(sorted(style_props.items()))
                if signature not in style_patterns:
                    style_patterns[signature] = {
                        'props': style_props,
                        'count': 0,
                        'widgets': []
                    }
                style_patterns[signature]['count'] += 1
                style_patterns[signature]['widgets'].append(widget_data.get('id', 'unknown'))
                
            # Recursively analyze children
            if 'children' in widget_data:
                for child in widget_data['children']:
                    analyze_widget(child)
                    
        # Analyze all widgets
        for page_widgets in widgets_data.values():
            for widget in page_widgets:
                analyze_widget(widget)
                
        # Create style definitions for commonly used patterns
        style_id = 1
        for signature, pattern_info in style_patterns.items():
            if pattern_info['count'] >= 2:  # Used by at least 2 widgets
                style_name = f"common_style_{style_id}"
                styles[style_name] = pattern_info['props']
                style_id += 1
                
        return styles if styles else None
        
    def generate_complete_config(self, display_config: Dict, pages_data: Dict, widgets_data: Dict[str, List[Dict]]) -> str:
        """Generate a complete ESPHome configuration with all sections"""
        
        # Generate main YAML
        main_yaml = self.generate_yaml(display_config, pages_data, widgets_data)
        
        # Generate style definitions
        style_defs = self.generate_style_definitions(widgets_data)
        if style_defs:
            styles_yaml = yaml.dump({'style_definitions': style_defs}, default_flow_style=False, indent=self.indentation)
            # Insert styles into main YAML (after lvgl section)
            lines = main_yaml.split('\n')
            lvgl_line = -1
            for i, line in enumerate(lines):
                if line.startswith('lvgl:'):
                    lvgl_line = i
                    break
            
            if lvgl_line >= 0:
                # Find end of lvgl section
                end_line = len(lines)
                for i in range(lvgl_line + 1, len(lines)):
                    if lines[i] and not lines[i].startswith((' ', '\t')):
                        end_line = i
                        break
                        
                # Insert styles
                styles_lines = styles_yaml.split('\n')
                lines[lvgl_line:lvgl_line] = ['', '# Common style definitions'] + styles_lines + ['']
                main_yaml = '\n'.join(lines)
                
        # Generate automations
        automation_yaml = self.generate_automation_yaml(widgets_data)
        
        return main_yaml + automation_yaml
        
    def export_project_summary(self, display_config: Dict, pages_data: Dict, widgets_data: Dict[str, List[Dict]]) -> str:
        """Generate a human-readable project summary"""
        
        summary = """# LVGL Project Summary
# 
# This document provides an overview of your LVGL project
# and the widgets/pages it contains.

"""
        
        # Display info
        summary += f"""## Display Configuration
- Size: {display_config['width']}x{display_config['height']} pixels
- Color Depth: {display_config.get('color_depth', 16)} bits
- Buffer Size: {display_config.get('buffer_size', '100%')}

"""
        
        # Pages info
        summary += f"## Pages ({len(pages_data)})\n"
        for page_id, page_info in pages_data.items():
            widget_count = len(widgets_data.get(page_id, []))
            summary += f"- **{page_id}**: {widget_count} widgets\n"
            
        summary += "\n"
        
        # Widget details
        summary += "## Widget Details\n\n"
        
        for page_id, page_widgets in widgets_data.items():
            if page_widgets:
                summary += f"### Page: {page_id}\n\n"
                
                for i, widget in enumerate(page_widgets, 1):
                    widget_type = widget.get('widget_type', 'unknown')
                    widget_id = widget.get('id', f'widget_{i}')
                    summary += f"{i}. **{widget_type.title()}** (`{widget_id}`)\n"
                    
                    # Position and size
                    x, y = widget.get('x', 0), widget.get('y', 0)
                    w, h = widget.get('width', 'auto'), widget.get('height', 'auto')
                    summary += f"   - Position: ({x}, {y})\n"
                    summary += f"   - Size: {w} x {h}\n"
                    
                    # Special properties
                    if widget_type == 'label' and 'text' in widget:
                        summary += f"   - Text: \"{widget['text']}\"\n"
                    elif widget_type == 'image' and 'src' in widget:
                        summary += f"   - Image: {widget['src']}\n"
                    elif widget_type in ['slider', 'arc', 'bar'] and 'value' in widget:
                        min_val = widget.get('min_value', 0)
                        max_val = widget.get('max_value', 100)
                        value = widget.get('value', 0)
                        summary += f"   - Value: {value} (range: {min_val}-{max_val})\n"
                        
                    # Actions
                    if 'actions' in widget and widget['actions']:
                        summary += f"   - Actions: {', '.join(widget['actions'].keys())}\n"
                        
                    summary += "\n"
                    
        # Statistics
        total_widgets = sum(len(widgets) for widgets in widgets_data.values())
        widget_types = {}
        
        for page_widgets in widgets_data.values():
            for widget in page_widgets:
                wtype = widget.get('widget_type', 'unknown')
                widget_types[wtype] = widget_types.get(wtype, 0) + 1
                
        summary += f"## Statistics\n\n"
        summary += f"- Total Widgets: {total_widgets}\n"
        summary += f"- Widget Types Used: {len(widget_types)}\n\n"
        
        summary += "### Widget Type Breakdown:\n"
        for wtype, count in sorted(widget_types.items()):
            summary += f"- {wtype.title()}: {count}\n"
            
        return summary
